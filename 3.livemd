# Problem 3: Largest Prime Factor

## Solution

To solve this problem we are going to take our number and begin removing prime divisors of increasing size. Eventually this will terminate with the highest prime factor being divided out, reducing our given number to the unit 1.

As an example lets take the number 13195:

* Starting at 2, we see that 2 does not divide 13195, so we increment our divisor to 3.
* This repeats for potential divisors 3 and 4
* We reach 5, which is a divisor of 13195, so we take `13195 / 5 = 2639`
* 2639 is not divisible by 5, so we increment our divisor to 6
* We repeat this process, reducing by 7 first `2639 / 7 = 377` and then by 13 `377 / 13 = 29`
* From there we continue until we reach 29, leaving us with `29 / 29 = 1`.
* Thus we can conclude that 29 is the highest prime factor of 13195.

```elixir
defmodule Problem3 do
  defguard is_factor(n, d) when rem(n, d) == 0
end
```

```elixir
import Problem3

600_851_475_143
|> then(&{&1, 2})
|> Stream.unfold(fn
  {1, _} -> nil
  {n, d} when is_factor(n, d) -> {d, {Integer.floor_div(n, d), d}}
  {n, d} -> {:skip, {n, d + 1}}
end)
|> Enum.at(-1)
```
