# Problem 1: Multiples of 3 or 5

## Solution

We will check each integer to see if it is a multiple of 3 or a multiple of 5, so let's define a helper function `multiple_of?` to assist with that.

```elixir
defmodule Problem1 do
  def multiple_of?(n, d), do: rem(n, d) == 0
end
```

Now we can apply a filter to collect our terms and sum them.
We use `Stream.filter/2`, which allows us to apply the filter lazily, so that we don't have to traverse the list twice to produce our sum.

```elixir
import Problem1

1..999
|> Stream.filter(&(multiple_of?(&1, 3) or multiple_of?(&1, 5)))
|> Enum.sum()
```
